# on silicon run this first :
# export DOCKER_DEFAULT_PLATFORM=linux/amd64
# run this to test locally
# BOOKAPP_API_BASE_URL=http://localhost docker compose up

services:
  mongo_db:
    image: mongo:4.4.29
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=$MONGODB_USER
      - MONGO_INITDB_ROOT_PASSWORD=$MONGODB_PASSWORD
    ports:
      - $MONGODB_LOCAL_PORT:$MONGODB_DOCKER_PORT
    volumes:
      - db:/data/db

  bookappbackend:
    image: pdelebarre/book-app-backend:latest
    container_name: book-app-backend
    restart: on-failure
    ports:
      - $SPRING_LOCAL_PORT:$SPRING_DOCKER_PORT
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.data.mongodb.uri" : "mongodb://$MONGODB_USER:$MONGODB_PASSWORD@mongo_db:$MONGODB_DOCKER_PORT/$MONGODB_DATABASE?authSource=admin"
        }'
    depends_on:
      - mongo_db

  bookappfrontend:
    image: pdelebarre/book-app-frontend:latest
    container_name: book-app-frontend
    restart: on-failure
    environment:
      - BOOKAPP_API_BASE_URL=$BOOKAPP_API_BASE_URL
      - BOOKAPP_API_PORT=$BOOKAPP_API_PORT
    ports:
      - "3005:80"
    depends_on:
      - bookappbackend

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - bookappbackend  # Prometheus depends on the backend to scrape metrics from it

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - prometheus  # Grafana depends on Prometheus for data source

volumes:
  db:
  prometheus_data: {}  # Optional: Use this if you want to persist Prometheus data
